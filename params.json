{"name":"Silexcms","tagline":"Silex CMS aiming to create powerful showcase websites","body":"# SilexCMS\r\n\r\n## About\r\n\r\nThis project aims to provide a minimal toolset helping to create corporate websites.\r\nUsing [Silex](http://silex.sensiolabs.org/) as primary framework, it includes multiple\r\nshorthand classes.\r\n\r\n## Version\r\n\r\n0.1.0\r\n\r\n## Examples\r\n\r\nWe use SilexCMS for our coroporate website. You could see it live at wisembly.com and\r\nhave a look to github.com/wisembly/wisembly\r\n\r\n## Documentation\r\n\r\n### Pages\r\n\r\nThere is two kind of web pages : statics and dynamics.\r\n\r\nStatic pages does not rely on anything else than their templates. Dynamic ones take\r\nparameters in their urls, fetch a table, then render the specified template, storing\r\nthe resulting objects in an accessible variable.\r\n\r\n#### Static Page\r\n\r\n```php\r\n$app->register(new SilexCMS\\Page\\StaticPage('/', 'home.html.twig'));\r\n```\r\n\r\n#### Dynamic Page\r\n\r\n```php\r\n$app->register(new SilexCMS\\Page\\DynamicPage('/product/{slug}', 'product.html.twig'));\r\n```\r\n\r\n```\r\n{% if app.set not none %}\r\n    Our product is called {{ app.set.name }} :)\r\n{% else %}\r\n    Product not found :(\r\n{% endif %}\r\n```\r\n\r\n### DataSets\r\n\r\nDatasets are an easy and handy way to retrieve database data directly in your Twig templates.\r\nFirst, register your available DataSets for your application:\r\n```php\r\n$app->register(new DataSet('twig_name', 'table_name'));\r\n$app->register(new DataSet('users', 'User'));\r\n```\r\n\r\nThen, use them in your Twig templates:\r\n```\r\n{# Tell in your template that you will need users DataSet loaded in app #}\r\n{% bloc users %}{% endbloc %}\r\n\r\n{# Then use it freely in your template in app var #}\r\nFirst user name: {{ app.users[0].name }}\r\n\r\nUsers emails:\r\n{% for user in app.users %}\r\n  email: {{ user.email }}\r\n{% endfor %}\r\n```\r\n\r\n#### Foreign Twig extension\r\n\r\nSilexCMS provides a Twig Extension to retrieve easily a particular object by id\r\nreference inside a DataSet\r\n\r\nFirst, load Foreign Key Extension\r\n```php\r\n$app['twig']->addExtension(new \\SilexCMS\\Twig\\Extension\\ForeignKeyExtension($app));\r\n```\r\n\r\nThen, use it that way in your Twig Templates:\r\n```\r\n{% block books %}{% endblock %}\r\n{% block categories %}{% endblock %}\r\n{% set category = foreign(app.categories, app.books[0].category_id) %}\r\nThe 1rst book category is: {{ category.name }}\r\n```\r\n\r\n### Security\r\n\r\nThe security classes give a very simple way to identifying some users.\r\n\r\nWhen instanciating a Firewall, you will only have to provide a name and an array\r\ncontaining your users authentification infos (where the key will be their usernames\r\nand values are plain text passwords). A logger instance will be automagically created\r\nin the `app[name]` variable.\r\n\r\nFrom then, you can use this logger to check current user state or change it.\r\n\r\n#### Manual example\r\n\r\n```php\r\n$app->register(new SilexCMS\\Security\\Firewall('main', array('user' => 'pass')));\r\n\r\nvar_dump($app['main']->getUsername()); // null\r\n$app['main']->bindUsername('user');\r\nvar_dump($app['main']->getUsername()); // \"user\"\r\n```\r\n\r\n#### Request example\r\n\r\nYou can also bind requests if they have at least two parameters : `_username` and\r\n`_password`.\r\n\r\n##### startup.php\r\n```php\r\n$app->register(new SilexCMS\\Security\\Firewall('security', array('user' => 'pass')));\r\n\r\n$app->register(new SilexCMS\\Page\\StaticPage('/login', 'login.html.twig'));\r\n$app->register(new SilexCMS\\Page\\StaticPage('/login/success', 'login/success.html.twig'));\r\n$app->register(new SilexCMS\\Page\\StaticPage('/login/failure', 'login/failure.html.twig'));\r\n\r\n$app->post('/post', function (Application $app, Request $req) {\r\n    $security = $app['security'];\r\n\r\n    if ($security->bindSession()->getUserName() || $security->bindRequest($req)->getUserName()) {\r\n        return $app->redirect('login/success');\r\n    } else {\r\n        return $app->redirect('login/failure');\r\n    }\r\n});\r\n```\r\n\r\n##### login.html.twig\r\n```html\r\n<form action=\"/login\" method=\"post\">\r\n    <input type=\"text\" name=\"_password\" /><br />\r\n    <input type=\"password\" name=\"_password\" /><br />\r\n    <input type=\"submit\" />\r\n</form>\r\n```\r\n\r\n## License\r\n\r\nSilexCMS is licensed under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}